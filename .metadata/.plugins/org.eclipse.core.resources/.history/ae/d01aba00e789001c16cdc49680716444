package com.springboot.app.gateway.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;

import com.google.common.net.HttpHeaders;

import reactor.core.publisher.Mono;

//CLASE114: ESTA ES LA CLASE DE FILTRO PARA LA AUTENTICACIÓN.
//exchange : SE PUEDE OBTENER EL TOKEN Y EL REQUEST QUE NOS ESTÁN ENVIANDO DESDE ALGÚN CLIENTE EN LAS CABECERAS. 

//1.-
	//justOrEmpty(null):SE CONVIERTE A UN FLUJO QUE PUEDE CONTENER EL TOKEN COMO TAMBIÉN PUEDE ESTAR VACÍO. POR LO TANTO TAMBIEN PUEDE MANDAR UN FLUJO VACÍO.
	//exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION): SE OBTIENE EL TOKEN, LA CABECERA, Y CON GETFIRST() SE OBTIENE EL NOBMRE DE LA CABECERA HTTP
	//RESUMIENDO: SE OBTIENE UN FLUJO CON LA CABECERA HTTP.
//2.-
	//SE PROCESA EL FLUJO CON LA CABECERA HTTP. 
    //filter(): LAS CABECERAS "AUTHORIZATION" COMIENZAN CON "BEARER" Y CON filter() SE PUEDE PREGUNTAR SI EXISTE EL "BEARER" CON < authHeather -> authHeather.startsWith("Bearer ") > ... SI HAY BEARER HAY TOKEN.
//3.-
	//SI NO HAY BEARER SE CREA UN FLUJO VACÍO QUE NO HACE NADA.
	//switchIfEmpty(): CON SWITCH SI LLEGA A ESTAR VACÍO, DEVUELVE UN Mono.empty().
//4.-
	//map(token -> token.replace("Bearer ", "")) : SE PROCESA LA CABECERA, QUITANDOLE EL BEARER CON MAP(). CON ESTO SOLO QUEDA EL TOKEN.
//5.-
	//YA SE TIENE EL TOKEN FORMATEADO. AHORA HAY QUE VALIDARLO CON EL AuthenticationManager.
	

@Component
public class JwtAuthenticationFilter implements WebFilter {

	@Override
	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
		//1
		return Mono.justOrEmpty(exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION))	
				//2;
				.filter(authHeather -> authHeather.startsWith("Bearer "))
				//3
				.switchIfEmpty(chain.filter(exchange).then(Mono.empty()))
				//4
				.map(token -> token.replace("Bearer ", ""))
				//5
				;
				
	}
	
	@Autowired
	private ReactiveAuthenticationManager authenticationManager;
}
