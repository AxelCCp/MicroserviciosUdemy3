package com.springboot.app.zuul.oauth;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;

//CLASE98: ESTE ES EL SERVIDOR DE RECURSOS QUE SE CONFIGURA EN ZUUL
//1.- METODOS HEREDADOS.
	//configure(HttpSecurity http): MÉTODO PARA PROTEGER RUTAS Y ENDPOINTS DE ZUUL SERVER.
		//antMatchers(): SE HACE REFERENCIA A LA RUTA.
		//permitAll(): PARA CONFIGURAR UNA RUTA COMO RUTA PÚBLICA.

	//configure(ResourceServerSecurityConfigurer resources): MÉTODO PARA CONFIGURAR EL TOKEN STORE.

//2.-SE COPIAN LOS BEANS DESDE EL MICROSERVICIO OAUTH

@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter  {

	@Override
	public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
		resources.tokenStore(tokenStore());
	}

	@Override
	public void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().antMatchers("/api/security/oauth/token").permitAll();
	}

	
	
	@Bean
	public JwtAccessTokenConverter accessTokenConverter() {
		JwtAccessTokenConverter tokenConverter	= new JwtAccessTokenConverter();
		tokenConverter.setSigningKey("algun_codigo_secreto_aeiou");
		return tokenConverter;
	}	
	@Bean
	public JwtTokenStore tokenStore() {
		return new JwtTokenStore(accessTokenConverter());
	}
	
	
}
