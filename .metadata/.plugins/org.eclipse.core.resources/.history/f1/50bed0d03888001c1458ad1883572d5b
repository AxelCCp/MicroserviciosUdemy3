package com.springboot.app.oauth.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;
import org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;

//CLASE94: ESTE ES EL SERVIDOR DE AUTORIZACIÓN

//1.-//REGISTRAR/REGISTRAR EL AuthenticationManager EN EL AuthorizationServer. TAMBN EL TOKENSTORE Y EL TOKEN CONVERTER QUE GUARDA LOS DATOS DEL USUARIO EN EL TOKEN.
	//1.1.-REGISTRO DEL AUTHENTICATION MANAGER.
	//1.2.-CONFIGURACION DE TOKEN CONVERTER. // SE PONE @BEAN, YA Q SERÁ UN COMPONENTE DE SPRING PARA LA CONFIGURACIÓN.
	//1.3.-CÓDIGO SECRETO PARA VALIDAR EL TOKEN, PARA CUANDO EL CLIENTE QUIERA ACCEDER A LOS SERVICIOS.
	//1.4.-SE GENERA TOKENSTORE, EL QUE GUARDA EL TOKEN CON LOS DATOS DEL TOKEN CONVERTER.
@Configuration
@EnableAuthorizationServer
public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter{

	
	
	
	@Override
	public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {
		
		super.configure(security);
	}
	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
		
		super.configure(clients);
	}
	
	//1
	@Override
	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
		//1.1     
		endpoints.authenticationManager(authenticationManager)
		//1.4
		.tokenStore(tokenStore())
		//1.2
		.accessTokenConverter(accessTokenConverter());
	}
	
	//1.2
	@Bean
	public JwtAccessTokenConverter accessTokenConverter() {
		JwtAccessTokenConverter tokenConverter	= new JwtAccessTokenConverter();
		//1.3
		tokenConverter.setSigningKey("algun_codigo_secreto_aeiou");
		return tokenConverter;
	}
	
	//1.4
	@Bean
	private JwtTokenStore tokenStore() {
		return new JwtTokenStore(accessTokenConverter());
	}
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	@Autowired
	private AuthenticationManager authenticationManager;
}
