package com.springboot.app.item.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.springboot.app.item.models.Item;
import com.springboot.app.item.models.Producto;
import com.springboot.app.item.models.service.IItemService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;

////CLASE39 Y 40
	//@RequestParam(name="nombre")String nombre : SE RELACIONA CON EL .YML DE GATEWAY. EL CONTROLADOR DE ITEMS, CAPTURA LA INFORMACIÓN ANEXADA AL REQUEST EN LOS FILTROS DE FÁBRICA, A TRAVÉS DE LOS MÉTODOS HANDLER.
	//...@RequestHeader(name="token-request")String token : TAMBIEN SE RECIBE LA CABECERA.
	//required=false : PARA QUE NO SEA OBLIGATORIO MANDAR LA INFORMACIÓN EN EL REQUEST.

	//cbFactory.create("items") : ... "items" ES EL NOMBRE DEL CIRCUITBREAKER. Y SE CONFIGURA EN LA CLASE AppCircuitBreakerConfig. 

//CLASE51
	//SE USAN ANOTACIONES

@RestController
public class ItemController {
	
	
	@GetMapping("listar")      //CLASE39
	public List<Item>listar(@RequestParam(name="nombre", required=false)String nombre, @RequestHeader(name="token-request",required=false)String token){
		System.out.println(nombre);
		System.out.println(token);
		return itemService.findAll();
	}
	
	
	@GetMapping("/ver/{id}/cantidad/{cantidad}")	
	public Item detalle(@PathVariable Long id, @PathVariable Integer cantidad) {
		return cbFactory.create("items")
				.run(()-> itemService.findById(id, cantidad), e -> metodoAlternativo(id,cantidad,e));		
	}
	
	public Item metodoAlternativo(Long id, Integer cantidad,Throwable e) {
		logger.info(e.getMessage());
		Item item = new Item();
		Producto producto = new Producto();
		item.setCantidad(cantidad);
		producto.setId(id);
		producto.setNombre("Sin nombre. no encontrado!");
		producto.setPrecio(0.00);
		item.setProducto(producto);
		return item;
	}
	
	
	//CLASE51
	@CircuitBreaker(name="items",fallbackMethod="metodoAlternativo")
	@GetMapping("/ver2/{id}/cantidad/{cantidad}")	
	public Item detalle2(@PathVariable Long id, @PathVariable Integer cantidad) {
		return itemService.findById(id, cantidad);		
	}
	
	
	@Autowired
	@Qualifier("serviceFeign")
	private IItemService itemService; 
	
	//CLASE43
	@Autowired
	private CircuitBreakerFactory cbFactory; 
	
	//CLASE44
	private final Logger logger = LoggerFactory.getLogger(ItemController.class);
}
