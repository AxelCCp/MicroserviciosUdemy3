package com.springboot.app.gateway.security;

import java.util.Base64;

import javax.crypto.SecretKey;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.security.Keys;
import reactor.core.publisher.Mono;

//CLASE113: CLASE DE UN ADMINISTRADOR DE AUTENTICACIÓN
//1.1.-EL MÉTODO DEVLEVE UN FLUJO Y CONTIENE UN ELEMENTO "Authentication", Y RECIVE POR PARÁMENTRO RECIBE OTRO Authentication QUE DEBE CONTENER EL TOKEN. Y ES ESTE Authentication QUE CONTIENE AL TOKEN, EL QUE SE PASA POR EL FILTRO. 
//1.2.-just(): CONVIERTE  A UN OBJ NORMAL EN UN OBJETO REACTIVO.
	//Mono.just(authentication.getCredentials().toString()) : SE OBTIENE EL TOKEN "authentication.getCredentials()" Y SE PASA A STRING "toString()".
	//map(): LUEGO DE PROCESA EL TOKEN Y SE OBTIENEN LOS CLAIMS. LOS CLAIMS ES LA INFORMACIÓN QUE CONTIENE EL TOKEN PARA LA AUTENTICACIÓN.
	//SecretKey llave... :SE CREA LA CONEXIÓN DE LA LLAVE SECRETA PARA OBTENER INFO DEL TOKEN. SE CONECTA CON EL SERVIDR DE CONFIGURACIONES QUE ESTÁ EN GITHUB.
	//hmacShaKeyFor() : ESTE MÉTODO RECIBE UN OBJ DE TIPO BYTES. POR LO TANTO SE USA EL MÉTODO getBytes().
	//CODIFICACIÓN A BASE64 :  
		//Base64.getEncoder().encode();
		//SE HACE ESTO PARA QUE LA LLAVE SEA MÁS SEGURA.

@Component
public class AuthenticationManagerJwt implements ReactiveAuthenticationManager{

	//1.1
	@Override
	public Mono<Authentication> authenticate(Authentication authentication) {
		// TODO Auto-generated method stub
		return Mono.just(authentication.getCredentials().toString())
				.map(token->{
					SecretKey llave = Keys.hmacShaKeyFor(Base64.getEncoder().encode(llaveJwt.getBytes()));
				});
	}
	
	@Value("${config.security.oauth.jwt.key}")
	private String llaveJwt;

}
