package com.springboot.app.zuul.oauth;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;

//CLASE98: ESTE ES EL SERVIDOR DE RECURSOS QUE SE CONFIGURA EN ZUUL
//1.- METODOS HEREDADOS.
	//configure(HttpSecurity http): MÉTODO PARA PROTEGER RUTAS Y ENDPOINTS DE ZUUL SERVER.
		//antMatchers(): SE HACE REFERENCIA A LA RUTA.
		//permitAll(): PARA CONFIGURAR UNA RUTA COMO RUTA PÚBLICA.
		//hasAnyRole(): SOLO DETERMINADOS ROLES TIENEN ACCESO A LAS RUTAS.
	//configure(ResourceServerSecurityConfigurer resources): MÉTODO PARA CONFIGURAR EL TOKEN STORE.

//2.-SE COPIAN LOS BEANS DESDE EL MICROSERVICIO OAUTH

//3.-CLASE100: SE USA INYECCIÓN DE PROPIEDAD, YA QUE SE LEERÁ EL APPLICATION PROPERTIES DESDE GITHUB.

@RefreshScope //3.2
@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter  {

	@Override
	public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
		resources.tokenStore(tokenStore());
	}

	@Override
	public void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().antMatchers("/api/security/oauth/**").permitAll()
		.antMatchers(HttpMethod.GET, "/api/productos/listar", "/api/items/listar", "/api/usuarios/usuarios").permitAll()
		.antMatchers(HttpMethod.GET, "/api/productos/ver/{id}","/api/items/ver/{id}/cantidad/{cantidad}", "/api/usuarios/usuarios/{id}").hasAnyRole("ADMIN","USER")
		.antMatchers(HttpMethod.POST, "/api/productos/crear", "/api/items/crear", "/api/usuarios/usuarios").hasRole("ADMIN")
		.antMatchers(HttpMethod.PUT, "/api/productos/editar/{id}", "/api/items/editar/{id}", "/api/usuarios/usuarios/{id}").hasRole("ADMIN")
		.antMatchers(HttpMethod.DELETE, "/api/productos/eliminar/{id}", "/api/items/eliminar/{id}", "/api/usuarios/usuarios/{id}").hasRole("ADMIN");
	}

	
	
	@Bean
	public JwtAccessTokenConverter accessTokenConverter() {
		JwtAccessTokenConverter tokenConverter	= new JwtAccessTokenConverter();
		tokenConverter.setSigningKey(jwtKey); //3.1
		return tokenConverter;
	}	
	@Bean
	public JwtTokenStore tokenStore() {
		return new JwtTokenStore(accessTokenConverter());
	}
	
	//3
	@Value("${config.security.oauth.jwt.key}")
	private String jwtKey;
}
